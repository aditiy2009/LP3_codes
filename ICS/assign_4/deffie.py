import random

def find_prime_no():
    for no in range(10,20):
        for i in (2,no):
            if(no%i == 0):
                break
            else:
                return no
    return 0

def find_first_primitive_root(q):
    for a in range(1,q):
        flag = 0
        li = []
        for i in range(1,q):
            li.append(((a**i)%q))
        for i in range(1,q):
            if i not in li:
                flag = 1;
                break;
        if flag == 0:
            return a

class User:
    def __init__(self,q,alpha):
        self.q = q
        self.alpha = alpha
        self._privatekey = random.randint(1,q)

    def generate_public_key(self):
        return ((self.alpha**self._privatekey)%self.q)

    def key_generation(self,public_key_of_other_user):
        return ((public_key_of_other_user**self._privatekey)%self.q)


def main():
    q = find_prime_no()
    alpha = find_first_primitive_root(q)
    print('prime no: ',q)
    print('primitive root: ',alpha)
    user1 = User(q,alpha)
    user2 = User(q,alpha)
    public_key_1 = user1.generate_public_key()
    public_key_2 = user2.generate_public_key()
    print('\n')
    print('public key of user 1: ',public_key_1)
    print('public key of user 2: ',public_key_2)
    print('\n')
    print('Key generated by user 1',user2.key_generation(public_key_1))
    print('Key generated by user 2',user1.key_generation(public_key_2))

if __name__ == '__main__':
    main()
